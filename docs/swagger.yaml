openapi: 3.0.0
info:
  title: Modern Finance API
  description: API for managing users, accounts, transfers, and PIX transactions.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://modern-finance-server-s8ua.onrender.com
    description: Production Server (Render)

paths:
  ### USERS ###
  /users/register:
    post:
      summary: Register a new user and account
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: User and account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
                  account:
                    $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
        "500":
          description: Internal error

  /users/login:
    post:
      summary: User login
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cpf
                - password
              properties:
                cpf:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid credentials
        "500":
          description: Internal error

  /users/me:
    get:
      summary: Get authenticated user
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid or expired token
        "500":
          description: Internal error

  /users/logout:
    post:
      summary: User logout
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Token not found
        "500":
          description: Internal error

  ### ACCOUNTS ###
  /accounts/{userId}:
    get:
      summary: Get account by userId
      tags: [Accounts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: Account not found

  /accounts/{accountId}/balance:
    get:
      summary: Get account balance
      tags: [Accounts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Account balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float

  ### TRANSFERS ###
  /transfers/set_transfer_password:
    post:
      summary: Set transfer password
      tags: [Transfers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetTransferPasswordRequest"
      responses:
        "200":
          description: Password set successfully

  /transfers/change_transfer_password:
    post:
      summary: Change transfer password
      tags: [Transfers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeTransferPasswordRequest"
      responses:
        "200":
          description: Password changed successfully

  /transfers/verify_transfer_password:
    post:
      summary: Verify transfer password
      tags: [Transfers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyTransferPasswordRequest"
      responses:
        "200":
          description: Verification result

  /transfers/transfer:
    post:
      summary: Transfer between accounts
      tags: [Transfers]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          description: Transfer successful

  ### PIX ###
  /pix/PixKey:
    post:
      summary: Create a new PIX key
      tags: [PIX]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePixKeyRequest"
      responses:
        "200":
          description: PIX key created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PixKey"

  /pix/PixKey/{PixKeyValue}:
    get:
      summary: Get PIX key by value
      tags: [PIX]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: PixKeyValue
          required: true
          schema:
            type: string
      responses:
        "200":
          description: PIX key found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PixKey"
        "404":
          description: PIX key not found

  /pix/transferPix:
    post:
      summary: Transfer using PIX
      tags: [PIX]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PixTransferRequest"
      responses:
        "200":
          description: PIX transfer successful

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cpf:
          type: string
        phone:
          type: string
        email:
          type: string

    Account:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        accountNumber:
          type: string
        balance:
          type: number
          format: float

    PixKey:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        keyType:
          type: string
        keyValue:
          type: string

    RegisterRequest:
      type: object
      required:
        - name
        - cpf
        - phone
        - email
        - password
      properties:
        name:
          type: string
        cpf:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string

    SetTransferPasswordRequest:
      type: object
      properties:
        accountNumber:
          type: string
        transferPassword:
          type: string

    ChangeTransferPasswordRequest:
      type: object
      properties:
        accountNumber:
          type: string
        old_transferPassword:
          type: string
        new_transferPassword:
          type: string

    VerifyTransferPasswordRequest:
      type: object
      properties:
        accountNumber:
          type: string

    TransferRequest:
      type: object
      properties:
        fromAccountNumber:
          type: string
        toAccountNumber:
          type: string
        transferPassword:
          type: string
        amount:
          type: number
          format: float

    CreatePixKeyRequest:
      type: object
      properties:
        accountId:
          type: string
        keyType:
          type: string
        keyValue:
          type: string

    PixTransferRequest:
      type: object
      properties:
        fromAccountId:
          type: string
        toPixKey:
          type: string
        amount:
          type: number
          format: float

security:
  - bearerAuth: []
